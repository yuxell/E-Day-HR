// <auto-generated />
using System;
using KD25_BitirmeProjesi.InfrastructureLayer.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KD25_BitirmeProjesi.InfrastructureLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250501142243_UpdateCompanyAndAddInitialCompanies")]
    partial class UpdateCompanyAndAddInitialCompanies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "e0144818-05f1-4387-8cd8-303a2381c2ed",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "41eb5303-8361-4b7a-87b0-91a3e8d5f1a5",
                            Name = "CompanyManager",
                            NormalizedName = "COMPANYMANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "46d13795-d54d-476b-8eee-137a71c43ed9",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        });
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar")
                        .HasDefaultValue("avatar.png");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Proficiency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<decimal?>("Salary")
                        .HasMaxLength(20)
                        .HasColumnType("money");

                    b.Property<string>("SecondName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("NationalID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b51b7a8b-589b-4c7e-a12d-e252a3364bb6",
                            CurrencyType = 1,
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LockoutEnabled = false,
                            NationalID = "12345678910",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENUXtS+LjzBfpRupRLRUTeLJsT9uCeKtESuYU9KJZXGBD2wMTNMeDhOPwhiYNXIgCQ==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed944e48-c178-4236-a0d2-08b610402000",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fce5fb87-5aa8-49cf-9dd6-c4e4bd3e7c63",
                            CurrencyType = 1,
                            Email = "manager@manager.com",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            LockoutEnabled = false,
                            NationalID = "12345678910",
                            NormalizedEmail = "MANAGER@MANAGER.COM",
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/5eisTRD47XftVEMJMJAKTjDAWwDshTTqIZyoxqLGaNJcsgb4foG8ZK+tKQpAw5g==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6edf723-0e14-40ef-be76-9c457783ad25",
                            Surname = "Manager",
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f64593f5-b187-4df4-be6c-2de53da993df",
                            CurrencyType = 1,
                            Email = "personel@personel.com",
                            EmailConfirmed = false,
                            FirstName = "Personel",
                            LockoutEnabled = false,
                            NationalID = "12345678910",
                            NormalizedEmail = "PERSONEL@PERSONEL.COM",
                            NormalizedUserName = "PERSONEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEORrMFiZjxHyi0Gc3bgq73nFML4/wUQ9k7C0tD3Q1qt8kK++hRAaqS4BFVP5s2nvnw==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc7a1d0a-b10a-48d1-b72f-cb52e8190e5e",
                            Surname = "Personel",
                            TwoFactorEnabled = false,
                            UserName = "personel"
                        });
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ContractEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FoundationYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<long>("MersisNum")
                        .HasColumnType("bigint");

                    b.Property<int?>("NumberOfEmployees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<long>("TaxNum")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ID");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Company 1 Address, Istanbul",
                            CompanyName = "company1",
                            ContractEndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 5, 1, 14, 22, 42, 414, DateTimeKind.Utc).AddTicks(6667),
                            Email = "info@company1.com",
                            FoundationYear = "2001",
                            IsActive = true,
                            Logo = "company1-logo.png",
                            MersisNum = 12345678901L,
                            NumberOfEmployees = 50,
                            Phone = "+90 212 123 45 67",
                            RecordStatus = 1,
                            TaxNum = 111111L,
                            TaxOffice = "Istanbul Vergi Dairesi",
                            Title = "Company One Title"
                        },
                        new
                        {
                            ID = 2,
                            Address = "Company 2 Address, Ankara",
                            CompanyName = "company2",
                            ContractEndDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 5, 1, 14, 22, 42, 414, DateTimeKind.Utc).AddTicks(6693),
                            Email = "info@company2.com",
                            FoundationYear = "2005",
                            IsActive = true,
                            Logo = "company2-logo.png",
                            MersisNum = 22345678901L,
                            NumberOfEmployees = 75,
                            Phone = "+90 312 234 56 78",
                            RecordStatus = 1,
                            TaxNum = 222222L,
                            TaxOffice = "Ankara Vergi Dairesi",
                            Title = "Company Two Title"
                        },
                        new
                        {
                            ID = 3,
                            Address = "Company 3 Address, Izmir",
                            CompanyName = "company3",
                            ContractEndDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 5, 1, 14, 22, 42, 414, DateTimeKind.Utc).AddTicks(6699),
                            Email = "info@company3.com",
                            FoundationYear = "2010",
                            IsActive = true,
                            Logo = "company3-logo.png",
                            MersisNum = 32345678901L,
                            NumberOfEmployees = 100,
                            Phone = "+90 232 345 67 89",
                            RecordStatus = 1,
                            TaxNum = 333333L,
                            TaxOffice = "Izmir Vergi Dairesi",
                            Title = "Company Three Title"
                        });
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.Expence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ExpenceTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("ExpenceTypeID");

                    b.ToTable("Expences");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.ExpenceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenceTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ExpenceTypes");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.LeaveRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("LeaveRecordTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<short>("TotalDays")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("LeaveRecordTypeID");

                    b.ToTable("LeaveRecords");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.LeaveRecordType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveRecordName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("LeaveRecordTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2025, 5, 1, 17, 22, 42, 419, DateTimeKind.Local).AddTicks(153),
                            LeaveRecordName = "Hastalık",
                            RecordStatus = 1
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2025, 5, 1, 17, 22, 42, 419, DateTimeKind.Local).AddTicks(173),
                            LeaveRecordName = "Doğum",
                            RecordStatus = 1
                        },
                        new
                        {
                            ID = 3,
                            CreatedAt = new DateTime(2025, 5, 1, 17, 22, 42, 419, DateTimeKind.Local).AddTicks(175),
                            LeaveRecordName = "Vefat",
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.SalaryAdvance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("SalaryAdvanceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.ToTable("SalaryAdvances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.Company", "Company")
                        .WithMany("AppUsers")
                        .HasForeignKey("CompanyID");

                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.Department", "Department")
                        .WithMany("AppUsers")
                        .HasForeignKey("DepartmentID");

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.Department", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.Expence", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", "AppUser")
                        .WithMany("Expences")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.ExpenceType", "ExpenceType")
                        .WithMany("Expences")
                        .HasForeignKey("ExpenceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ExpenceType");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.LeaveRecord", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", "AppUser")
                        .WithMany("LeaveRecords")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.LeaveRecordType", "LeaveRecordType")
                        .WithMany("LeaveRecords")
                        .HasForeignKey("LeaveRecordTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("LeaveRecordType");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.SalaryAdvance", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", "AppUser")
                        .WithMany("SalaryAdvances")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.AppUser", b =>
                {
                    b.Navigation("Expences");

                    b.Navigation("LeaveRecords");

                    b.Navigation("SalaryAdvances");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.Company", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.Department", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.ExpenceType", b =>
                {
                    b.Navigation("Expences");
                });

            modelBuilder.Entity("KD25_BitirmeProjesi.CoreLayer.Entities.LeaveRecordType", b =>
                {
                    b.Navigation("LeaveRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
